- name: Ensure dependencies are installed
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  loop:
    - build-essential
    - libgmp-dev
    - libssl-dev
    - wget
  register: apt_result
  retries: 3
  delay: 5
  until: apt_result is succeeded

- name: Download strongSwan TAR archive
  ansible.builtin.get_url:
    url: "https://download.strongswan.org/strongswan-{{ strongswan_from_tar_on_debian_strongswan_version }}.tar.gz"
    dest: "/tmp/strongswan-{{ strongswan_from_tar_on_debian_strongswan_version }}.tar.gz"

- name: Create strongSwan installation directory
  ansible.builtin.file:
    path: "{{ strongswan_install_dir }}"
    state: directory

- name: Extract strongSwan TAR archive
  ansible.builtin.unarchive:
    src: "/tmp/strongswan-{{ strongswan_from_tar_on_debian_strongswan_version }}.tar.gz"
    dest: "{{ strongswan_install_dir }}"
    remote_src: yes

- name: Compile and install strongSwan
  ansible.builtin.shell: |
    cd {{ strongswan_install_dir }}/strongswan-{{ strongswan_from_tar_on_debian_strongswan_version }}
    ./configure
    make
    sudo make install
  args:
    creates: "/usr/local/sbin/swanctl"
  become: true

- name: Create strongSwan systemd service file
  ansible.builtin.copy:
    dest: /etc/systemd/system/strongswan-swanctl.service
    content: |
      [Unit]
      Description=strongSwan IPsec IKEv1/IKEv2 daemon using swanctl
      After=network.target

      [Service]
      ExecStart=/usr/local/sbin/swanctl --no-daemon
      ExecReload=/bin/kill -HUP $MAINPID
      KillMode=process
      Restart=on-failure

      [Install]
      WantedBy=multi-user.target

- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: yes

- name: Enable and start strongSwan service
  ansible.builtin.systemd:
    name: strongswan-swanctl
    enabled: yes
    state: started

- name: Cleanup downloaded files
  ansible.builtin.file:
    path: "/tmp/strongswan-{{ strongswan_from_tar_on_debian_strongswan_version }}.tar.gz"
    state: absent
