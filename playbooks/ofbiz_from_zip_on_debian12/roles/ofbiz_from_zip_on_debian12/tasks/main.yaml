---
- name: "Assertions"
  assert:
    that:
      - 'ofbiz_version != ""'
    msg: "You need to define the variable 'ofbiz_version' (e.g. ofbiz_version: '17.12.07')."

- name: "Ubuntu packages"
  when: ansible_distribution == "Ubuntu"
  block:
    - name: "Add OpenJDK GPG key"
      get_url:
        url: https://adoptopenjdk.jfrog.io/adoptopenjdk/api/gpg/key/public
        dest: /tmp/adoptopenjdk.asc

    - name: "Install OpenJDK GPG key"
      command: apt-key add /tmp/adoptopenjdk.asc
    
    - name: Install coreutils
      apt:
        name: coreutils
        state: present

    - name: "Configure Ubuntu OpenJDK Apt repository"
      apt_repository:
        repo: "deb http://ppa.launchpad.net/openjdk-r/ppa/ubuntu {{ ansible_distribution_release }} main"
      register: _ubuntu_repository_added

    - name: "Update apt cache and install Debian dependencies"
      apt:
        force_apt_get: true
        update_cache: true
        cache_valid_time: 3600
      changed_when: false
      when: _ubuntu_repository_added.changed or ofbiz_update_package_manager_cache|bool

    - name: "Install Ubuntu dependencies"
      block:
        - name: "Install OFBiz dependencies with apt"
          apt:
            force_apt_get: true
            name:
              - gnupg
              - unzip
              - adoptopenjdk-8-hotspot

    - name: "Install OpenJDK"
      package:
        name: "openjdk-8-jdk-headless"

- name: "Debian packages"
  when: ansible_distribution == "Debian"
  block:
    - name: "Update apt cache"
      apt:
        force_apt_get: true
        update_cache: true
        cache_valid_time: 3600
      changed_when: false
      when: ofbiz_update_package_manager_cache|bool

    - name: "Install Debian dependencies"
      block:
        - name: "Install OFBiz dependencies with apt"
          apt:
            force_apt_get: true
            name:
              - gnupg
              - apt-transport-https
              - unzip
    - name: Add the AdoptOpenJDK GPG Key
      apt_key:
        url: https://packages.adoptium.net/artifactory/api/gpg/key/public
        state: present

    - name: Add the AdoptOpenJDK APT Repository
      apt_repository:
        repo: "deb https://packages.adoptium.net/artifactory/deb/ {{ ansible_distribution_release }} main"
        state: present

    - name: Update the APT Package List
      apt:
        update_cache: yes

    - name: Install Temurin JDK 8
      apt:
        name: temurin-8-jdk
        state: present

- name: "Arch Linux packages"
  when: ansible_os_family == "Archlinux"
  block:
    - name: "Pacman update cache"
      pacman: update_cache=true
      changed_when: false
      when: ofbiz_update_package_manager_cache|bool

    - name: "Install Arch Linux dependencies"
      pacman:
        name:
          - gnupg
          - jdk8-openjdk
          - unzip

- name: "OFBiz user"
  block:
    - name: "Create group '{{ ofbiz_user_group }}'"
      group:
        name: "{{ ofbiz_user_group }}"
        gid: "{{ ofbiz_user_gid }}"

    - name: "Create user '{{ ofbiz_user }}'"
      user:
        name: "{{ ofbiz_user }}"
        uid: "{{ ofbiz_user_uid }}"
        group: "{{ ofbiz_user_group }}"
        home: "{{ ofbiz_user_home }}"
        shell: "{{ ofbiz_user_shell }}"
        createhome: true

    - name: "Dir permissions {{ ofbiz_user_home }}"
      file:
        state: directory
        path: "{{ ofbiz_user_home }}"
        owner: "{{ ofbiz_user }}"
        group: "{{ ofbiz_user_group }}"
        mode: 0700

    - name: "File {{ ofbiz_user_home }}/.bashrc"
      copy:
        dest: "{{ ofbiz_user_home }}/.bashrc"
        owner: "{{ ofbiz_user }}"
        group: "{{ ofbiz_user_group }}"
        mode: 0644
        content: |
          # ~/.bashrc
          # If not running interactively, don't do anything
          [[ $- != *i* ]] && return
          alias ls='ls --color=auto'
          PS1='[\u@\h \W]\$ '
          source "{{ (ofbiz_user_home + '/env.sh') }}"

- name: "OFBiz download"
  environment:
    http_proxy: "{{ ofbiz_proxy }}"
    https_proxy: "{{ ofbiz_proxy }}"
    HTTP_PROXY: ""
    HTTPS_PROXY: ""
  block:
    - name: "Create OFBiz downloads directory"
      file:
        state: directory
        path: "{{ ofbiz_user_home }}/downloads"
        owner: "{{ ofbiz_user }}"
        group: "{{ ofbiz_user_group }}"
        mode: 0755

    - name: "Check the existence of {{ ofbiz_user_home }}/downloads/KEYS"
      stat:
        path: "{{ ofbiz_user_home }}/downloads/KEYS"
      register: _gpg_keys_file

    - name: "Check the existence of {{ ofbiz_user_home }}/downloads/apache-ofbiz-{{ ofbiz_version }}.zip"
      stat:
        path: "{{ ofbiz_user_home }}/downloads/apache-ofbiz-{{ ofbiz_version }}.zip"
      register: _ofbiz_zip_archive_file

    - name: "Download OFBiz ZIP file"
      get_url:
        dest: "{{ ofbiz_user_home }}/downloads/apache-ofbiz-{{ ofbiz_version }}.zip"
        url: "https://dlcdn.apache.org/ofbiz/apache-ofbiz-{{ ofbiz_version }}.zip"
        owner: "{{ ofbiz_user }}"
        group: "{{ ofbiz_user_group }}"
        mode: 0644
        use_proxy: "{{ 'yes' if ofbiz_proxy != '' else 'no' }}"
      when: not _ofbiz_zip_archive_file.stat.exists

    - name: "Extract OFBiz archive"
      block:
        - name: "Create the directory where OFBiz will be extracted"
          file:
            state: directory
            path: "{{ item }}"
            owner: "{{ ofbiz_user }}"
            group: "{{ ofbiz_user_group }}"
            mode: 0755
          loop:
            - "{{ ofbiz_user_home }}/ofbiz"
            - "{{ _ofbiz_dir }}"

    - name: Ensure ACL package is installed
      apt:
        name: acl
        state: present
      become: yes


    - name: "Extract Apache OFBiz"
      shell: |
        unzip -o "{{ ofbiz_user_home }}/downloads/apache-ofbiz-{{ ofbiz_version }}.zip" -d "{{ _ofbiz_dir }}"
      args:
        creates: "{{ _ofbiz_extraction_dir }}/README.md" # or any file that is expected to be in the root of the extracted folder
      become: true
      become_user: "{{ ofbiz_user }}"

    - name: "Link {{ ofbiz_user_home }}/current"
      file:
        state: link
        dest: "{{ ofbiz_user_home }}/current"
        src: "{{ _ofbiz_extraction_dir }}"
        owner: "{{ ofbiz_user }}"
        group: "{{ ofbiz_user_group }}"
  
    - name: Set default Java version to Java 8
      alternatives:
        name: java
        link: /usr/bin/java
        path: /usr/lib/jvm/temurin-8-jdk-amd64/bin/java
        priority: 1081
      become: true

    - name: "Run: gradle/init-gradle-wrapper.sh"
      shell: bash ./gradle/init-gradle-wrapper.sh
      args:
        chdir: "{{ _ofbiz_extraction_dir }}"
        creates: "{{ _ofbiz_extraction_dir }}/gradle/wrapper/gradle-wrapper.jar"
      become: true
      become_user: "{{ ofbiz_user }}"


    - name: "Add lines to gradlew"
      lineinfile:
        path: "{{ _ofbiz_extraction_dir }}/gradlew"
        insertafter: '^#!/usr/bin/env sh'
        line: "{{ item }}"
      loop:
        - 'source {{ ofbiz_user_home }}/env.sh'
        - '[[ `id -u` -eq 0 ]] && exit 1'

    - name: Create OFBiz Systemd service file
      become: yes
      copy:
        dest: /etc/systemd/system/ofbiz.service
        content: |
          [Unit]
          Description=Apache OFBiz
          After=network.target

          [Service]
          User={{ ofbiz_user }}
          Group={{ ofbiz_user_group }}
          WorkingDirectory={{ _ofbiz_extraction_dir }}
          ExecStartPre=/bin/bash -c 'echo $JAVA_HOME; $JAVA_HOME/bin/java -version'
          ExecStart=bash {{ _ofbiz_extraction_dir }}/gradlew ofbiz
          Restart=always
          # Environment="JAVA_HOME=/usr/lib/jvm/temurin-8-jdk-amd64"
          # Environment="PATH=/usr/lib/jvm/temurin-8-jdk-amd64/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

          [Install]
          WantedBy=multi-user.target


    - name: Reload Systemd daemon
      become: yes
      systemd:
        daemon_reload: yes

    - name: Enable and start OFBiz service
      become: yes
      systemd:
        name: ofbiz
        enabled: yes
        state: started

